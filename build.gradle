plugins {
  id 'scala'
  id 'idea'
  id 'com.github.johnrengelman.shadow' version '5.1.0'
  id "com.github.maiflai.scalatest" version '0.25'
}

compileScala.targetCompatibility = 1.8
compileScala.sourceCompatibility = 1.8

ext {
  sparkVersion = '2.4.5'
  scalaVersion = '2.11.12'
  scalaVersionMinor = scalaVersion.replaceFirst('\\.[0-9]+$', '')
  awsVersion = '1.11.650'
}

repositories {
  jcenter()
}

dependencies {
  implementation "org.scala-lang:scala-library:$scalaVersion"
  implementation "org.clapper:grizzled-slf4j_$scalaVersionMinor:1.3.4"
  implementation "org.json4s:json4s-ext_$scalaVersionMinor:3.5.3"

  compileOnly "org.apache.spark:spark-sql_$scalaVersionMinor:$sparkVersion"
  compileOnly "org.apache.spark:spark-hive_$scalaVersionMinor:$sparkVersion"

  compileOnly "com.amazonaws:aws-java-sdk-kinesis:$awsVersion"
  compileOnly "com.amazonaws:aws-java-sdk-dynamodb:$awsVersion"

  testImplementation "org.scalatest:scalatest_$scalaVersionMinor:3.0.8"
  testImplementation "org.mockito:mockito-scala-scalatest_$scalaVersionMinor:1.6.2"
  testRuntime 'org.pegdown:pegdown:1.6.0'
}

sourceSets {
  test.compileClasspath += configurations.compileOnly
  test.runtimeClasspath += configurations.compileOnly
}

test {
  testLogging {
    events 'passed', 'skipped', 'failed'
  }
}

jar {
  manifest {
    attributes("Implementation-Title": project.name,
               "Implementation-Version": project.version)
  }
}

shadowJar {
  classifier = null
  mergeServiceFiles()
}

